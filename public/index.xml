<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>LearnSQLite</title>
    <link>localhost/</link>
    <description>Recent content on LearnSQLite</description>
    <image>
      <title>LearnSQLite</title>
      <url>localhost/full_logo.png</url>
      <link>localhost/full_logo.png</link>
    </image>
    <generator>Hugo -- 0.134.2</generator>
    <language>en</language>
    <lastBuildDate>Thu, 12 Sep 2024 16:09:02 +0530</lastBuildDate>
    <atom:link href="localhost/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQLite Write Ahead Logging</title>
      <link>localhost/posts/sqlite-write-ahead-logging/</link>
      <pubDate>Thu, 12 Sep 2024 16:09:02 +0530</pubDate>
      <guid>localhost/posts/sqlite-write-ahead-logging/</guid>
      <description>&lt;h1 id=&#34;mastering-sqlite-write-ahead-logging-wal-use-cases-best-practices-and-performance-benchmarks&#34;&gt;Mastering SQLite Write-Ahead Logging (WAL): Use Cases, Best Practices, and Performance Benchmarks&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;By default, SQLite uses a rollback journal mode to ensure atomicity, consistency, isolation, and durability (ACID) compliance. However, SQLite offers an alternative journaling mode called Write-Ahead Logging (WAL), which dramatically improves write performance and allows concurrent read and write operations.&lt;/p&gt;
&lt;p&gt;In this post, we’ll dive deep into SQLite’s WAL mode, explaining how it works, when to use it, and its pros and cons. We’ll also explore benchmarks to see how it performs in different scenarios.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
